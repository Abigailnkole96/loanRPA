
# This is the main file for the Flask application, which will handle the loan application process. The Flask app will display a form to users (loan applicants) and return the result (approved or rejected) after processing the data.

# Flask will serve as the backend for your RPA system and integrate with a machine learning model to make decisions on loan approvals.

# Why: Flask is lightweight and perfect for building web apps that need to handle dynamic content, such as processing loan applications.

# Code Overview:

# Route /: Displays the loan application form.
# Route /result: Processes the submitted data, integrates with the ML model, and shows the approval decision.



from flask import Flask, render_template, request
import pickle

app = Flask(__name__)

# Load the pre-trained machine learning model
with open('model.pkl', 'rb') as model_file:
    model = pickle.load(model_file)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/result', methods=['POST'])
def result():
    data = request.form
    salary = float(data['salary'])
    credit_score = float(data['credit_score'])
    loan_amount = float(data['loan_amount'])
    
    # ML Model Prediction
    prediction = model.predict([[salary, credit_score, loan_amount]])[0]
    result = "Approved" if prediction == 1 else "Rejected"
    
    return render_template('result.html', result=result)

if __name__ == '__main__':
    app.run(debug=True)















































































































































































































































































































































